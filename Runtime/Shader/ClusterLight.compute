#pragma kernel XYPlane
#pragma kernel ZPlane
#pragma kernel ClusterLight

#define MaxVoxelLightCount 64
#define XRes 8
#define YRes 8
#define ZRes 8

struct PointLight
{
    float4 lightColor;
    float4 sphere;
};

struct XYPlanes
{
    float4 topPlane;
    float4 bottomPlane;
    float4 rightPlane;
    float4 leftPlane;
};

struct ZPlanes
{
    float4 frontPlane;
    float4 backPlane;
};
matrix _InvVP;
float3 _CameraNearPos;
float3 _CameraFarPos;
float3 _CameraForward;
uint _PointLightCount;

RWTexture3D<uint2> _PointLightTexture;

StructuredBuffer<PointLight> _PointLightsBuffer;

RWStructuredBuffer<XYPlanes> _XYPlaneBuffer;
RWStructuredBuffer<ZPlanes> _ZPlaneBuffer;
RWStructuredBuffer<uint> _PointLightsIndexBuffer;

inline float4 GetPlane(float3 a, float3 b, float3 c)
{
    float3 normal = normalize(cross(b - a,c - a));
    return float4(normal, -dot(normal, a));
}

inline float4 GetPlane(float4 a, float4 b, float4 c)
{
    a /= a.w;
    b /= b.w;
    c /= c.w;
    float3 normal = normalize(cross(b.xyz - a.xyz, c.xyz - a.xyz));
    return float4(normal, -dot(normal, a.xyz));
}

inline float4 GetPlane(float3 normal, float3 inPoint)
{
    return float4(normal, -dot(normal, inPoint));
}

inline float GetDistanceToPlane(float4 plane, float3 inPoint)
{
    return dot(plane.xyz, inPoint) + plane.w;
}

float SphereIntersect(float4 sphere, float4 planes[6])
{
    [unroll]
    for(uint i = 0; i < 6; ++i)
    {
        if (GetDistanceToPlane(planes[i], sphere.xyz) > sphere.w) return 0;
    }
    return 1;
}

[numthreads(XRes, YRes, 1)]
void XYPlane(uint2 id : SV_DispatchThreadID)
{
    float2 leftBotUV = id.xy / float2(XRes, YRes);
    float2 rightTopUV = leftBotUV + 1.0 / float2(XRes, YRes);
    leftBotUV = leftBotUV * 2 - 1;
    rightTopUV = rightTopUV * 2 - 1;
    const float nearZ = 1;
    XYPlanes planes;
    planes.topPlane = GetPlane(mul(_InvVP, float4(-1, rightTopUV.y, nearZ, 1)), mul(_InvVP, float4(1, rightTopUV.y, nearZ, 1)), mul(_InvVP, float4(0, rightTopUV.y, 0.5, 1)));//TOP
    planes.bottomPlane = GetPlane(mul(_InvVP, float4(1, leftBotUV.y, nearZ, 1)), mul(_InvVP, float4(-1, leftBotUV.y, nearZ, 1)), mul(_InvVP, float4(0, leftBotUV.y, 0.5, 1)));//BOTTOM
    planes.leftPlane = GetPlane(mul(_InvVP, float4(leftBotUV.x, -1, nearZ, 1)), mul(_InvVP, float4(leftBotUV.x, 1, nearZ, 1)), mul(_InvVP, float4(leftBotUV.x, 0, 0.5, 1)));//LEFT
    planes.rightPlane = GetPlane(mul(_InvVP, float4(rightTopUV.x, 1, nearZ, 1)), mul(_InvVP, float4(rightTopUV.x, -1, nearZ, 1)), mul(_InvVP, float4(rightTopUV.x, 0, 0.5, 1)));//RIGHT
    _XYPlaneBuffer[id.x + id.y * XRes] = planes;
}

[numthreads(ZRes, 1, 1)]
void ZPlane(uint3 id : SV_DispatchThreadID)
{
    float3 forwardPos = lerp(_CameraNearPos, _CameraFarPos, id.x / (float)ZRes);
    float3 backPos = lerp(_CameraNearPos, _CameraFarPos, (id.x + 1.0) / (float)ZRes);
    ZPlanes planes;
    planes.backPlane = GetPlane(_CameraForward, backPos);
    planes.frontPlane = GetPlane(-_CameraForward, forwardPos);
    _ZPlaneBuffer[id.x] = planes;
}
[numthreads(XRes, YRes, 1)]
void ClusterLight(uint3 id : SV_DispatchThreadID)
{
    float4 planes[6];
    XYPlanes xyPlanes = _XYPlaneBuffer[id.x + id.y * XRes];
    ZPlanes zPlanes = _ZPlaneBuffer[id.z];
    planes[0] = xyPlanes.bottomPlane;
    planes[1] = xyPlanes.topPlane;
    planes[2] = xyPlanes.rightPlane;
    planes[3] = xyPlanes.leftPlane;
    planes[4] = zPlanes.backPlane;
    planes[5] = zPlanes.frontPlane;
    uint clusterCount = 0;
    uint sBufferIndex = id.x * MaxVoxelLightCount + id.y * MaxVoxelLightCount * XRes
                        + id.z * MaxVoxelLightCount * XRes * YRes;
    for (uint i = 0; i < _PointLightCount && clusterCount < MaxVoxelLightCount; i++)
    {
        PointLight light = _PointLightsBuffer[i];
        if(SphereIntersect(light.sphere, planes) > 0.5)
        {
            _PointLightsIndexBuffer[sBufferIndex + clusterCount] = i + 1;
            clusterCount++;
        }
    }
    _PointLightTexture[id] = uint2(sBufferIndex, sBufferIndex + clusterCount);
}